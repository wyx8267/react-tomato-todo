{"version":3,"sources":["redux/reducers/index.tsx","redux/reducers/todos.tsx","redux/actionTypes.tsx","redux/reducers/tomatoes.tsx","redux/store.tsx","config/history.tsx","config/axios.tsx","components/Login/Login.tsx","redux/actions/todos.tsx","components/Todos/TodoInput.tsx","components/Todos/TodoItem.tsx","components/Tomatoes/CountDown.tsx","components/Todos/Todos.tsx","components/Tomatoes/TomatoAction.tsx","components/Tomatoes/TomatoList.tsx","components/Tomatoes/Tomatoes.tsx","redux/actions/tomatoes.tsx","components/Statistics/Polygon.tsx","components/Statistics/TodoHistory/TodoHistoryTodoItem.tsx","components/Statistics/TodoHistory/TodoHistory.tsx","components/Statistics/Statistics.tsx","components/Home/Home.tsx","components/SignUp/SignUp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["combineReducers","todos","state","action","type","payload","map","t","id","Object","assign","editing","tomatoes","store","createStore","rootReducer","publicUrl","history","createBrowserHistory","basename","instance","axios","create","baseURL","headers","interceptors","request","use","config","xToken","localStorage","getItem","error","console","Promise","reject","response","setItem","status","push","Login","props","onChange","key","value","newState","setState","submit","a","account","password","post","Error","this","className","placeholder","prefix","style","color","e","target","Password","onClick","to","React","updateTodo","TodoInput","onKeyUp","keyCode","description","postTodo","addTodo","data","resource","suffix","mapDispatchToProps","connect","ownProps","TodoItem","params","completed","completed_at","Date","put","editTodo","editText","Editing","theme","deleted","Text","onDoubleClick","todoItemClass","classNames","checked","timerId","Todos","unCompletedTodos","filter","unDeletedTodos","CountDown","countDown","timer","setInterval","time","document","title","onFinish","clearInterval","percent","duration","width","min","Math","floor","second","confirm","Modal","TomatoAction","updateTomato","ended_at","forceUpdate","showConfirm","okText","cancelText","onOk","abortTomato","onCancel","aborted","unfinishedTomato","html","undefined","startTomato","startedAt","parse","started_at","timeNow","getTime","TomatoItem","format","parseISO","TomatoList","list","dates","d","finishedTomatoes","length","keys","sort","b","splice","Tomatoes","addTomato","_","groupBy","tomato","Polygon","point","firstDay","finishedY","range","finishedCount","pointArr","date","x","y","totalFinishCount","join","fill","stroke","strokeWidth","points","TodoHistoryTodoItem","todo","formatText","itemType","updated_at","created_at","TabPane","Tabs","TodoHistory","finishedTodos","dailyFinishedTodos","finishedTodoList","finishedDates","getDay","weekday","deletedTodoList","deletedTodos","defaultActiveKey","tab","Statistics","dailyTodos","menu","Item","Home","getTodos","get","resources","initTodos","getTomatoes","initTomatoes","getMe","user","overlay","marginLeft","SignUp","passwordConfirmation","password_confirmation","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82883f4e.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport tomatoes from './tomatoes'\r\n\r\nexport default combineReducers({ todos, tomatoes})","import { ADD_TODO, INIT_TODOS, UPDATE_TODO, EDIT_TODO } from '../actionTypes'\r\n\r\nexport default (state: any[] = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            return [...state, action.payload]\r\n        case INIT_TODOS:\r\n            return [...action.payload]\r\n        case UPDATE_TODO:\r\n            return state.map(t => {\r\n                if (t.id === action.payload.id) {\r\n                    return action.payload\r\n                } else {\r\n                    return t\r\n                }\r\n            })\r\n        case EDIT_TODO:\r\n            return state.map(t => {\r\n                if (t.id === action.payload) {\r\n                    return Object.assign({}, t, { editing: true })\r\n                } else {\r\n                    return Object.assign({}, t, { editing: false })\r\n                }\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}","export const ADD_TODO = 'ADD_TODO'\r\nexport const INIT_TODOS = 'INIT_TODOS'\r\nexport const EDIT_TODO = 'EDIT_TODO'\r\nexport const UPDATE_TODO = 'UPDATE_TODO'\r\n\r\nexport const ADD_TOMATO = 'ADD_TOMATO'\r\nexport const INIT_TOMATOES = 'INIT_TOMATOES'\r\nexport const UPDATE_TOMATO = 'UPDATE_TOMATO'","import { ADD_TOMATO, INIT_TOMATOES, UPDATE_TOMATO } from '../actionTypes'\r\n\r\nexport default (state: any[] = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_TOMATO:\r\n            return [action.payload, ...state]\r\n        case INIT_TOMATOES:\r\n            return [...action.payload]\r\n        case UPDATE_TOMATO:\r\n            return state.map(t => {\r\n                if (t.id === action.payload.id) {\r\n                    return action.payload\r\n                } else {\r\n                    return t\r\n                }\r\n            })\r\n        default: return state\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer)\r\nexport default store","import { createBrowserHistory } from 'history'\r\n\r\nconst ENV = process.env.NODE_ENV\r\nlet publicUrl: string = ''\r\n\r\nif (ENV === 'development') {\r\n    publicUrl = '/'\r\n} else if (ENV === 'production') {\r\n    publicUrl = '/react-tomato-todo'\r\n}\r\n\r\nconst history = createBrowserHistory({\r\n    basename: publicUrl\r\n})\r\n\r\nexport default history","import axios from 'axios'\r\nimport history from './history'\r\n\r\nconst appId = 'nnisJpYRKhMVWLpTdNxf8UnN'\r\nconst appSecret = '89VekUFZPK2CWpHRGpCHGgvb'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://gp-server.hunger-valley.com/',\r\n    headers: {\r\n        't-app-id': appId,\r\n        't-app-secret': appSecret\r\n    }\r\n})\r\n\r\ninstance.interceptors.request.use((config) => {\r\n    const xToken = localStorage.getItem('x-token')\r\n    if (xToken) {\r\n        config.headers['Authorization'] = `Bearer ${xToken}`\r\n    }\r\n    return config\r\n}, (error) => {\r\n    console.error(error)\r\n    return Promise.reject(error)\r\n})\r\n\r\ninstance.interceptors.response.use((response) => {\r\n    if (response.headers['x-token']) {\r\n        localStorage.setItem('x-token', response.headers['x-token'])\r\n    }\r\n    return response\r\n}, (error) => {\r\n    if (error.response.status === 401) {\r\n        history.push('login')\r\n    }\r\n    return Promise.reject(error)\r\n})\r\n\r\nexport default instance","import * as React from 'react'\r\nimport { Input, Icon, Button } from 'antd'\r\nimport axios from '../../config/axios'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './Login.scss'\r\n\r\ninterface ILoginState {\r\n    account: string,\r\n    password: string\r\n}\r\n\r\nexport default class Login extends React.Component<any, ILoginState> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account: '',\r\n            password: ''\r\n        }\r\n    }\r\n    onChange = (key: keyof ILoginState, value: string) => {\r\n        const newState = {}\r\n        newState[key] = value\r\n        this.setState(newState)\r\n    }\r\n    submit = async () => {\r\n        const { account, password } = this.state\r\n        try {\r\n            await axios.post('sign_in/user', {\r\n                account,\r\n                password\r\n            })\r\n            this.props.history.push('/')\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    }\r\n    render() {\r\n        const { account, password } = this.state\r\n        return (\r\n            <div className=\"Login\" id=\"Login\">\r\n                <h1>番茄TODO-登录</h1>\r\n                <Input\r\n                    placeholder=\"请输入用户名\"\r\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                    value={account}\r\n                    onChange={(e) => this.onChange('account', e.target.value)}\r\n                />\r\n                <Input.Password\r\n                    placeholder=\"请输入密码\"\r\n                    value={password}\r\n                    onChange={(e) => this.onChange('password', e.target.value)}\r\n                />\r\n                <Button className=\"loginButton\" type=\"primary\" onClick={this.submit}>登录</Button>\r\n                <p>Or <Link to=\"/signUp\">点此注册</Link></p>\r\n            </div>\r\n        )\r\n    }\r\n}","import { ADD_TODO, INIT_TODOS, UPDATE_TODO, EDIT_TODO } from '../actionTypes'\r\n\r\nexport const addTodo = (payload: any) => {\r\n    return {\r\n        type: ADD_TODO,\r\n        payload\r\n    }\r\n}\r\nexport const initTodos = (payload: any[]) => {\r\n    return {\r\n        type: INIT_TODOS,\r\n        payload\r\n    }\r\n}\r\nexport const updateTodo = (payload: any) => {\r\n    return {\r\n        type: UPDATE_TODO,\r\n        payload\r\n    }\r\n}\r\nexport const editTodo = (payload: number) => {\r\n    return {\r\n        type: EDIT_TODO,\r\n        payload\r\n    }\r\n}\r\n","import * as React from 'react'\r\nimport { Input, Icon } from 'antd'\r\nimport { connect } from 'react-redux'\r\nimport { addTodo } from '../../redux/actions/todos'\r\nimport axios from '../../config/axios'\r\n\r\ninterface ITodoInputState {\r\n    description: string\r\n}\r\ninterface ITodoInputProps {\r\n    addTodo: (payload: any) => any\r\n}\r\n\r\nclass TodoInput extends React.Component<any, ITodoInputState, ITodoInputProps> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            description: ''\r\n        }\r\n    }\r\n    onKeyUp = (e) => {\r\n        if (e.keyCode === 13 && this.state.description !== '') {\r\n            this.postTodo()\r\n        }\r\n    }\r\n    postTodo = async() => {\r\n        try{\r\n            const response = await axios.post('todos',{description:this.state.description})\r\n            this.props.addTodo(response.data.resource)\r\n        }catch(e){\r\n            throw new Error(e)\r\n        }\r\n        this.setState({ description: '' })\r\n    }\r\n    render() {\r\n        const { description } = this.state\r\n        const suffix = description ? <Icon type=\"enter\" onClick={this.postTodo} /> : <span />\r\n        return (\r\n            <div className=\"TodoInput\" id=\"TodoInput\">\r\n                <Input\r\n                    placeholder=\"添加新任务\"\r\n                    suffix={suffix}\r\n                    value={description}\r\n                    onChange={(e) => this.setState({ description: e.target.value })}\r\n                    onKeyUp={this.onKeyUp}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    todos: state.todos,\r\n    ...ownProps\r\n})\r\nconst mapDispatchToProps = {\r\n    addTodo\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoInput)","import * as React from 'react'\r\nimport { Checkbox, Icon } from 'antd'\r\nimport { connect } from 'react-redux'\r\nimport { editTodo, updateTodo } from '../../redux/actions/todos'\r\nimport axios from '../../config/axios'\r\nimport classNames from 'classnames'\r\nimport './TodoItem.scss'\r\n\r\ninterface ITodoItemProps {\r\n    id: number\r\n    description: string\r\n    completed: boolean\r\n    editing: boolean\r\n    editTodo: (id: number) => any\r\n    updateTodo: (payload: any) => any\r\n}\r\ninterface ITodoItemState {\r\n    editText: string\r\n}\r\n\r\nclass TodoItem extends React.Component<ITodoItemProps, ITodoItemState> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            editText: this.props.description\r\n        }\r\n    }\r\n    updateTodo = async (params: any) => {\r\n        if(params.completed){\r\n            params.completed_at = new Date()\r\n        }\r\n        try {\r\n            const response = await axios.put(`todos/${this.props.id}`, params)\r\n            this.props.updateTodo(response.data.resource)\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    }\r\n    editTodo = () => {\r\n        this.props.editTodo(this.props.id)\r\n    }\r\n    onKeyUp = (e) => {\r\n        if (e.keyCode === 13 && this.state.editText !== '') {\r\n            this.updateTodo({ description: this.state.editText })\r\n        }\r\n    }\r\n    render() {\r\n        const Editing = (\r\n            <div className=\"editing\">\r\n                <input type=\"text\"\r\n                    value={this.state.editText}\r\n                    onChange={e => this.setState({ editText: e.target.value })}\r\n                    onKeyUp={this.onKeyUp}\r\n                />\r\n                <div className=\"iconWrapper\">\r\n                    <Icon type=\"enter\" />\r\n                    <Icon type=\"delete\" theme=\"filled\" onClick={e => this.updateTodo({ deleted: true })} />\r\n                </div>\r\n            </div>\r\n        )\r\n        const Text = <span className=\"text\" onDoubleClick={this.editTodo}>{this.props.description}</span>\r\n        const todoItemClass = classNames({\r\n            TodoItem: true,\r\n            editing: this.props.editing,\r\n            completed: this.props.completed\r\n        })\r\n        return (\r\n            <div className={todoItemClass} id=\"TodoItem\">\r\n                <Checkbox\r\n                    checked={this.props.completed}\r\n                    onChange={e => this.updateTodo({ completed: e.target.checked })}\r\n                />\r\n                {\r\n                    this.props.editing ? Editing : Text\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    todos: state.todos,\r\n    ...ownProps\r\n})\r\nconst mapDispatchToProps = {\r\n    editTodo,\r\n    updateTodo\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoItem)","import * as React from 'react'\r\nimport './CountDown.scss'\r\n\r\ninterface ICountDownProps {\r\n    timer: number\r\n    duration: number\r\n    onFinish: () => void\r\n}\r\ninterface ICountDownState {\r\n    countDown: number\r\n}\r\n\r\nlet timerId: NodeJS.Timeout\r\n\r\nclass CountDown extends React.Component<ICountDownProps, ICountDownState>{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            countDown: this.props.timer\r\n        }\r\n    }\r\n    get countDown() {\r\n        const min = Math.floor(this.state.countDown / (1000 * 60))\r\n        const second = Math.floor(this.state.countDown / 1000 % 60)\r\n        return `${min < 10 ? `0${min}` : min}:${second < 10 ? `0${second}` : second}`\r\n    }\r\n    componentDidMount() {\r\n        timerId = setInterval(() => {\r\n            const time = this.state.countDown\r\n            this.setState({ countDown: time - 1000 })\r\n            document.title = `${this.countDown} - 番茄TODO`\r\n            if (time < 0) {\r\n                document.title = '番茄TODO'\r\n                this.props.onFinish()\r\n                clearInterval(timerId)\r\n            }\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(timerId)\r\n    }\r\n    render() {\r\n        const percent = 1 - this.state.countDown / this.props.duration\r\n        return (\r\n            <div className=\"CountDown\" id=\"CountDown\">\r\n                <span className=\"restTime\">{this.countDown}</span>\r\n                <div className=\"progress\" style={{ width: `${percent * 100}%` }} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountDown","import * as React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { updateTodo } from '../../redux/actions/todos'\r\nimport TodoInput from './TodoInput'\r\nimport TodoItem from './TodoItem'\r\nimport './Todos.scss'\r\n\r\nclass Todos extends React.Component<any>{\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    get unDeletedTodos() {\r\n        return this.props.todos.filter(t => !t.deleted)\r\n    }\r\n    get unCompletedTodos() {\r\n        return this.unDeletedTodos.filter(t => !t.completed)\r\n    }\r\n    get completedTodos() {\r\n        return this.unDeletedTodos.filter(t => t.completed)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Todos\" id=\"Todos\">\r\n                <TodoInput />\r\n                <div className=\"todoList\">\r\n                    {\r\n                        this.unCompletedTodos.map(t => {\r\n                            return <TodoItem key={t.id} {...t} />\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    todos: state.todos,\r\n    ...ownProps\r\n})\r\nconst mapDispatchToProps = {\r\n    updateTodo\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos)","import * as React from 'react'\r\nimport { Button, Input, Icon, Modal } from 'antd'\r\nimport axios from '../../config/axios'\r\nimport CountDown from './CountDown'\r\n// import CountDown from './CountDownHook'\r\nimport './TomatoAction.scss'\r\n\r\ninterface ITomatoActionProps {\r\n    startTomato: () => void\r\n    updateTomato: (payload: any) => void\r\n    unfinishedTomato: any\r\n}\r\ninterface ITomatoActionState {\r\n    description: string\r\n}\r\n\r\nconst confirm = Modal.confirm\r\n\r\nclass TomatoAction extends React.Component<ITomatoActionProps, ITomatoActionState> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            description: ''\r\n        }\r\n    }\r\n    onKeyUp = (e) => {\r\n        if (e.keyCode === 13 && this.state.description !== '') {\r\n            this.updateTomato({\r\n                description: this.state.description, ended_at: new Date()\r\n            })\r\n            this.setState({ description: '' })\r\n        }\r\n    }\r\n    onFinish = () => {\r\n        this.forceUpdate()\r\n    }\r\n    showConfirm = () => {\r\n        confirm({\r\n            title: '您目前正在一个番茄工作时间中，要放弃这个番茄吗？',\r\n            okText: '确定',\r\n            cancelText: '取消',\r\n            onOk: () => {\r\n                this.abortTomato()\r\n            },\r\n            onCancel: () => { }\r\n        })\r\n    }\r\n    abortTomato = () => {\r\n        this.updateTomato({ aborted: true })\r\n        document.title = '番茄TODO'\r\n    }\r\n    updateTomato = async (params: any) => {\r\n        try {\r\n            const response = await axios.put(`tomatoes/${this.props.unfinishedTomato.id}`, params)\r\n            this.props.updateTomato(response.data.resource)\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    }\r\n    render() {\r\n        let html = <div />\r\n        if (this.props.unfinishedTomato === undefined) {\r\n            html = <Button className=\"startTomatoButton\" onClick={() => { this.props.startTomato() }}>开始番茄</Button>\r\n        } else {\r\n            const startedAt = Date.parse(this.props.unfinishedTomato.started_at)\r\n            const duration = this.props.unfinishedTomato.duration\r\n            const timeNow = new Date().getTime()\r\n            if (timeNow - startedAt > duration) {\r\n                html = <div className=\"inputWrapper\">\r\n                    <Input value={this.state.description}\r\n                        placeholder=\"请输入完成的任务内容\"\r\n                        onChange={e => this.setState({ description: e.target.value })}\r\n                        onKeyUp={e => this.onKeyUp(e)} />\r\n                    <Icon type=\"close-circle\" className=\"abort\" onClick={this.showConfirm} />\r\n                </div>\r\n            } else if (timeNow - startedAt < duration) {\r\n                const timer = duration - timeNow + startedAt\r\n                html = (\r\n                    <div className=\"countDownWrapper\">\r\n                        <CountDown timer={timer}\r\n                            onFinish={this.onFinish}\r\n                            duration={duration} />\r\n                        <Icon type=\"close-circle\" className=\"abort\" onClick={this.showConfirm} />\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"TomatoAction\" id=\"TomatoAction\">\r\n                {html}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TomatoAction","import * as React from 'react'\r\nimport { format, parseISO } from 'date-fns'\r\nimport './TomatoList.scss'\r\n\r\ninterface ITomatoListProps {\r\n    finishedTomatoes: any\r\n}\r\n\r\nconst TomatoItem = function (props) {\r\n    return (\r\n        <div className=\"TomatoItem\">\r\n            <span className=\"timeRange\">{format(parseISO(props.started_at), 'HH:mm')} - {format(parseISO(props.ended_at), 'HH:mm')}</span>\r\n            <span className=\"description\">{props.description}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass TomatoList extends React.Component<ITomatoListProps>{\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    get dates() {\r\n        const dates = Object.keys(this.props.finishedTomatoes)\r\n        return dates.sort((a, b) => Date.parse(b) - Date.parse(a)).splice(0, 3)\r\n    }\r\n    render() {\r\n        const list = this.dates.map(d => {\r\n            const tomatoes = this.props.finishedTomatoes[d]\r\n            return (\r\n                <div key={d} className=\"dailyTomatoes\">\r\n                    <div className=\"title\">\r\n                        <span className=\"dateTime\">{format(parseISO(d), 'M月dd日')}</span>\r\n                        <span className=\"finishedCount\">完成了{tomatoes.length}个番茄</span>\r\n                    </div>\r\n                    {\r\n                        tomatoes.map(t => <TomatoItem key={t.id} {...t} />)\r\n                    }\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"TomatoList\" id=\"TomatoList\">\r\n                {list}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TomatoList","import * as React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport axios from '../../config/axios'\r\nimport TomatoAction from './TomatoAction'\r\nimport TomatoList from './TomatoList'\r\nimport { addTomato, updateTomato } from '../../redux/actions/tomatoes'\r\nimport { format } from 'date-fns'\r\nimport _ from 'lodash'\r\n\r\nimport './Tomatoes.scss'\r\n\r\ninterface ITomatoesProps {\r\n    addTomato: (payload: any) => any\r\n    updateTomato: (payload: any) => any\r\n    initTomatoes: (payload: any[]) => any\r\n    tomatoes: any[]\r\n}\r\n\r\nclass Tomatoes extends React.Component<ITomatoesProps> {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    get unfinishedTomato() {\r\n        return this.props.tomatoes.filter(t => !t.description && !t.ended_at && !t.aborted)[0]\r\n    }\r\n\r\n    get finishedTomatoes() {\r\n        const finishedTomatoes = this.props.tomatoes.filter(t => t.description && t.ended_at && !t.aborted)\r\n        return _.groupBy(finishedTomatoes, (tomato) => {\r\n            return format(new Date(tomato.started_at), 'yyyy-MM-dd')\r\n        })\r\n    }\r\n    startTomato = async () => {\r\n        try {\r\n            const response = await axios.post('tomatoes', { duration: 1500000 })\r\n            this.props.addTomato(response.data.resource)\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Tomatoes\" id=\"Tomatoes\">\r\n                <TomatoAction\r\n                    startTomato={this.startTomato}\r\n                    unfinishedTomato={this.unfinishedTomato}\r\n                    updateTomato={this.props.updateTomato} />\r\n                <TomatoList finishedTomatoes={this.finishedTomatoes} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    tomatoes: state.tomatoes,\r\n    ...ownProps\r\n})\r\nconst mapDispatchToProps = {\r\n    addTomato,\r\n    updateTomato\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tomatoes)","import { ADD_TOMATO, INIT_TOMATOES, UPDATE_TOMATO } from '../actionTypes'\r\n\r\nexport const addTomato = (payload: any) => {\r\n    return {\r\n        type: ADD_TOMATO,\r\n        payload\r\n    }\r\n}\r\nexport const initTomatoes = (payload: any[]) => {\r\n    return {\r\n        type: INIT_TOMATOES,\r\n        payload\r\n    }\r\n}\r\nexport const updateTomato = (payload: any) => {\r\n    return {\r\n        type: UPDATE_TOMATO,\r\n        payload\r\n    }\r\n}","import * as React from 'react'\r\n\r\ninterface IPolygonProps {\r\n    data: any\r\n    totalFinishCount: number\r\n}\r\n\r\nclass Polygon extends React.Component<IPolygonProps> {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    point = () => {\r\n        const dates = Object.keys(this.props.data).sort((a, b) => { return Date.parse(a) - Date.parse(b) })\r\n        const firstDay = dates[0]\r\n        if (firstDay) {\r\n            const range = new Date().getTime() - Date.parse(firstDay)\r\n            let finishedCount = 0\r\n            let finishedY\r\n            const pointArr = dates.map(date => {\r\n                const x = (Date.parse(date) - Date.parse(firstDay)) / range * 240\r\n                finishedCount += this.props.data[date].length\r\n                const y = (1 - finishedCount / this.props.totalFinishCount) * 60\r\n                finishedY = y\r\n                return `${x},${y}`\r\n            })\r\n            \r\n            return [`0,60`, ...pointArr, `240,${finishedY}`, '240,60'].join(' ')\r\n        } else {\r\n            return `0,60 240,60`\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Polygon\" id=\"Polygon\">\r\n                <svg>\r\n                    <polygon fill=\"rgba(215,78,78,0.1)\" stroke=\"rgba(215,78,78,0.5)\" strokeWidth=\"1\" points={this.point()} />\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Polygon","import * as React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { format, parseISO } from 'date-fns'\r\nimport { updateTodo } from '../../../redux/actions/todos'\r\nimport axios from '../../../config/axios'\r\nimport './TodoHistoryTodoItem.scss'\r\n\r\ninterface ITodoHistoryTodoItemProps {\r\n    todo: any\r\n    itemType: string\r\n    updateTodo: (payload: any) => any\r\n}\r\n\r\nclass TodoHistoryTodoItem extends React.Component<ITodoHistoryTodoItemProps> {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    updateTodo = async (params: any) => {\r\n        try {\r\n            const response = await axios.put(`todos/${this.props.todo.id}`, params)\r\n            this.props.updateTodo(response.data.resource)\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    }\r\n    render() {\r\n        let action, formatText, time\r\n        if (this.props.itemType === 'completed') {\r\n            formatText = 'HH:mm'\r\n            time = this.props.todo.updated_at\r\n            action = (\r\n                <div className=\"action\">\r\n                    <span onClick={() => this.updateTodo({ completed: false })}>恢复</span>\r\n                    <span onClick={() => this.updateTodo({ deleted: true })}>删除</span>\r\n                </div>\r\n            )\r\n        } else if (this.props.itemType === 'deleted') {\r\n            formatText = 'yyyy-MM-dd'\r\n            time = this.props.todo.created_at\r\n            action = (\r\n                <div className=\"action\">\r\n                    <span onClick={() => this.updateTodo({ deleted: false })}>恢复</span>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"TodoHistoryTodoItem\" id=\"TodoHistoryTodoItem\">\r\n                <div className=\"text\">\r\n                    <span className=\"time\">{format(parseISO(time), formatText)}</span>\r\n                    <span className=\"description\">{this.props.todo.description}</span>\r\n                </div>\r\n                {action}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (ownProps) => ({\r\n    ...ownProps\r\n})\r\nconst mapDispatchToProps = {\r\n    updateTodo\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoHistoryTodoItem)","import * as React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { format, getDay } from 'date-fns'\r\nimport { Tabs } from 'antd'\r\nimport TodoHistoryTodoItem from './TodoHistoryTodoItem'\r\nimport _ from 'lodash'\r\n\r\nimport './TodoHistory.scss'\r\n\r\nconst TabPane = Tabs.TabPane\r\n\r\ninterface ITodoHistoryProps {\r\n    todos: any[]\r\n}\r\n\r\nclass TodoHistory extends React.Component<ITodoHistoryProps> {\r\n    get finishedTodos() {\r\n        return this.props.todos.filter(t => t.completed && !t.deleted)\r\n    }\r\n    get deletedTodos() {\r\n        return this.props.todos.filter(t => t.deleted)\r\n    }\r\n    get dailyFinishedTodos() {\r\n        return _.groupBy(this.finishedTodos, (todo) => {\r\n            return format(new Date(todo.updated_at), 'yyyy-MM-dd')\r\n        })\r\n    }\r\n    get finishedDates() {\r\n        return Object.keys(this.dailyFinishedTodos).sort((a, b) => Date.parse(b) - Date.parse(a))\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() {\r\n        const finishedTodoList = this.finishedDates.map(date => {\r\n            const weekday = (date)=>{\r\n                switch(getDay(new Date(date))){\r\n                    case 1: return '周一'\r\n                    case 2: return '周二'\r\n                    case 3: return '周三'\r\n                    case 4: return '周四'\r\n                    case 5: return '周五'\r\n                    case 6: return '周六'\r\n                    case 0: return '周日'\r\n                }\r\n            }\r\n            return (\r\n                <div key={date} className=\"dailyTodos\">\r\n                    <div className=\"summary\">\r\n                        <p className=\"date\">\r\n                            <span>{date}</span>\r\n                            <span>{weekday(date)}</span>\r\n                        </p>\r\n                        <p className=\"finishedCount\">\r\n                            完成了{this.dailyFinishedTodos[date].length}个任务\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"todoList\">\r\n                        {\r\n                            this.dailyFinishedTodos[date].map(todo => <TodoHistoryTodoItem key={todo.id} todo={todo} itemType=\"completed\" />)\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n        const deletedTodoList = this.deletedTodos.map(todo => {\r\n            return (\r\n                <TodoHistoryTodoItem key={todo.id} todo={todo} itemType=\"deleted\" />\r\n            )\r\n        })\r\n        return (\r\n            <Tabs defaultActiveKey=\"1\">\r\n                <TabPane tab=\"已完成的任务\" key=\"1\">\r\n                    <div className=\"TodoHistory\" id=\"TodoHistory\">\r\n                        {finishedTodoList}\r\n                    </div>\r\n                </TabPane>\r\n                <TabPane tab=\"已删除的任务\" key=\"2\">\r\n                    <div className=\"TodoHistory\" id=\"TodoHistory\">\r\n                        {deletedTodoList}\r\n                    </div>\r\n                </TabPane>\r\n            </Tabs>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    todos: state.todos,\r\n    ...ownProps\r\n})\r\n\r\nexport default connect(mapStateToProps)(TodoHistory)","import * as React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Polygon from './Polygon'\r\nimport TodoHistory from './TodoHistory/TodoHistory'\r\nimport { format } from 'date-fns'\r\nimport _ from 'lodash'\r\n\r\nimport './Statistics.scss'\r\n\r\ninterface IStatisticsProps {\r\n    todos: any[]\r\n}\r\n\r\nclass Statistics extends React.Component<IStatisticsProps> {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    get finishedTodos() {\r\n        return this.props.todos.filter(t => t.completed && !t.deleted)\r\n    }\r\n    get dailyTodos() {\r\n        return _.groupBy(this.finishedTodos, (todo) => {\r\n            return format(new Date(todo.updated_at), 'yyyy-MM-dd')\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Statistics\" id=\"Statistics\">\r\n                <ul>\r\n                    <li>统计</li>\r\n                    <li>目标</li>\r\n                    <li>番茄历史</li>\r\n                    <li>\r\n                        任务历史\r\n                        累计完成{this.finishedTodos.length}个任务\r\n                        <Polygon data={this.dailyTodos} totalFinishCount={this.finishedTodos.length} />\r\n                    </li>\r\n                </ul>\r\n                <TodoHistory/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    todos: state.todos,\r\n    ...ownProps\r\n})\r\n\r\nexport default connect(mapStateToProps)(Statistics)","import * as React from 'react'\r\nimport { Dropdown, Icon, Menu } from 'antd'\r\nimport Todos from '../Todos/Todos'\r\nimport Tomatoes from '../Tomatoes/Tomatoes'\r\nimport Statistics from '../Statistics/Statistics'\r\nimport { connect } from 'react-redux'\r\nimport { initTodos } from '../../redux/actions/todos'\r\nimport { initTomatoes } from '../../redux/actions/tomatoes'\r\nimport axios from '../../config/axios'\r\nimport history from '../../config/history'\r\nimport './Home.scss'\r\n\r\ninterface IHomeState {\r\n    user: any\r\n}\r\n\r\nconst logout = () => {\r\n    localStorage.setItem('x-token', '')\r\n    history.push('/login')\r\n}\r\n\r\nconst menu = (\r\n    <Menu>\r\n        <Menu.Item key=\"1\"><Icon type=\"user\" />个人设置</Menu.Item>\r\n        <Menu.Item key=\"2\"><Icon type=\"logout\" onClick={logout} />注销</Menu.Item>\r\n    </Menu>\r\n)\r\n\r\nclass Home extends React.Component<any, IHomeState> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.state = {\r\n            user: {}\r\n        }\r\n    }\r\n    async componentWillMount() {\r\n        await this.getMe()\r\n        await this.getTodos()\r\n        await this.getTomatoes()\r\n    }\r\n    getTodos = async () => {\r\n        try {\r\n            const response = await axios.get('todos')\r\n            const todos = response.data.resources.map(t => Object.assign({}, t, { editing: false }))\r\n            this.props.initTodos(todos)\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    }\r\n    getTomatoes = async () => {\r\n        try {\r\n            const response = await axios.get('tomatoes')\r\n            this.props.initTomatoes(response.data.resources)\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    }\r\n    getMe = async () => {\r\n        const response = await axios.get('me')\r\n        this.setState({ user: response.data })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Home\" id=\"Home\">\r\n                <header>\r\n                    <span className=\"logo\">LOGO</span>\r\n                    <Dropdown overlay={menu}>\r\n                        <span>\r\n                            {this.state.user && this.state.user.account}\r\n                            <Icon type=\"down\" style={{ marginLeft: 8 }} />\r\n                        </span>\r\n                    </Dropdown>\r\n                </header>\r\n                <main>\r\n                    <Tomatoes />\r\n                    <Todos />\r\n                </main>\r\n                <Statistics />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    ...ownProps\r\n})\r\nconst mapDispatchToProps = {\r\n    initTodos,\r\n    initTomatoes\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import * as React from 'react'\r\nimport { Input, Icon, Button } from 'antd'\r\nimport axios from '../../config/axios'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './SignUp.scss'\r\n\r\ninterface ISignUpState {\r\n    account: string,\r\n    password: string,\r\n    passwordConfirmation: string\r\n}\r\n\r\nexport default class SignUp extends React.Component<any, ISignUpState> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account: '',\r\n            password: '',\r\n            passwordConfirmation: ''\r\n        }\r\n    }\r\n    onChange = (key: keyof ISignUpState, value: string) => {\r\n        const newState = {}\r\n        newState[key] = value\r\n        this.setState(newState)\r\n    }\r\n    submit = async () => {\r\n        const { account, password, passwordConfirmation } = this.state\r\n        try {\r\n            await axios.post('sign_up/user', {\r\n                account,\r\n                password,\r\n                password_confirmation: passwordConfirmation\r\n            })\r\n            this.props.history.push('/')\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    }\r\n    render() {\r\n        const { account, password, passwordConfirmation } = this.state\r\n        return (\r\n            <div className=\"SignUp\" id=\"SignUp\">\r\n                <h1>番茄TODO-注册</h1>\r\n                <Input\r\n                    placeholder=\"请输入用户名\"\r\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                    value={account}\r\n                    onChange={(e) => this.onChange('account', e.target.value)}\r\n                />\r\n                <Input.Password\r\n                    placeholder=\"请输入密码\"\r\n                    value={password}\r\n                    onChange={(e) => this.onChange('password', e.target.value)}\r\n                />\r\n                <Input.Password\r\n                    placeholder=\"请确认密码\"\r\n                    value={passwordConfirmation}\r\n                    onChange={(e) => this.onChange('passwordConfirmation', e.target.value)}\r\n                />\r\n                <Button className=\"signUpButton\" type=\"primary\" onClick={this.submit}>注册</Button>\r\n                <p>Or <Link to=\"/login\">点此登录</Link></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import * as React from 'react'\nimport { Router, Route} from \"react-router-dom\"\nimport history from './config/history'\nimport './App.scss'\nimport Login from './components/Login/Login'\nimport Home from './components/Home/Home'\nimport SignUp from './components/SignUp/SignUp'\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router history={history}>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signUp\" component={SignUp} />\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}